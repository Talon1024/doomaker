#[cfg(test)]
mod tests {
	use doomwad::wad::*;
	use std::error::Error;
	use std::fs::File;
	use std::io::Read;

	#[test]
	fn can_load_wad() -> Result<(), Box<dyn Error>> {
		let wad = DoomWad::load("tests/data/3difytest.wad")?;
		assert!(matches!(wad.wtype, DoomWadType::PWAD));
		assert_ne!(wad.lumps.len(), 0);

		let lump_names: [LumpName; 272] = [
			LumpName(*b"PLAYPAL\0"),
			LumpName(*b"COLORMAP"),
			LumpName(*b"P_START\0"),
			LumpName(*b"BAAAAAAD"),
			LumpName(*b"METALT2\0"),
			LumpName(*b"4DOT\0\0\0\0"),
			LumpName(*b"4DOTR\0\0\0"),
			LumpName(*b"4DOTG\0\0\0"),
			LumpName(*b"GOODGRIE"),
			LumpName(*b"LUNPOEG\0"),
			LumpName(*b"TRIMM\0\0\0"),
			LumpName(*b"P_END\0\0\0"),
			LumpName(*b"FF_START"),
			LumpName(*b"METALTF2"),
			LumpName(*b"METALT2\0"),
			LumpName(*b"F_END\0\0\0"),
			LumpName(*b"PNAMES\0\0"),
			LumpName(*b"TEXTURE1"),
			LumpName(*b"MAP01\0\0\0"),
			LumpName(*b"THINGS\0\0"),
			LumpName(*b"LINEDEFS"),
			LumpName(*b"SIDEDEFS"),
			LumpName(*b"VERTEXES"),
			LumpName(*b"SEGS\0\0\0\0"),
			LumpName(*b"SSECTORS"),
			LumpName(*b"NODES\0\0\0"),
			LumpName(*b"SECTORS\0"),
			LumpName(*b"REJECT\0\0"),
			LumpName(*b"BLOCKMAP"),
			LumpName(*b"MAP02\0\0\0"),
			LumpName(*b"THINGS\0\0"),
			LumpName(*b"LINEDEFS"),
			LumpName(*b"SIDEDEFS"),
			LumpName(*b"VERTEXES"),
			LumpName(*b"SEGS\0\0\0\0"),
			LumpName(*b"SSECTORS"),
			LumpName(*b"NODES\0\0\0"),
			LumpName(*b"SECTORS\0"),
			LumpName(*b"REJECT\0\0"),
			LumpName(*b"BLOCKMAP"),
			LumpName(*b"MAP03\0\0\0"),
			LumpName(*b"THINGS\0\0"),
			LumpName(*b"LINEDEFS"),
			LumpName(*b"SIDEDEFS"),
			LumpName(*b"VERTEXES"),
			LumpName(*b"SEGS\0\0\0\0"),
			LumpName(*b"SSECTORS"),
			LumpName(*b"NODES\0\0\0"),
			LumpName(*b"SECTORS\0"),
			LumpName(*b"REJECT\0\0"),
			LumpName(*b"BLOCKMAP"),
			LumpName(*b"MAP04\0\0\0"),
			LumpName(*b"THINGS\0\0"),
			LumpName(*b"LINEDEFS"),
			LumpName(*b"SIDEDEFS"),
			LumpName(*b"VERTEXES"),
			LumpName(*b"SEGS\0\0\0\0"),
			LumpName(*b"SSECTORS"),
			LumpName(*b"NODES\0\0\0"),
			LumpName(*b"SECTORS\0"),
			LumpName(*b"REJECT\0\0"),
			LumpName(*b"BLOCKMAP"),
			LumpName(*b"MAP05\0\0\0"),
			LumpName(*b"THINGS\0\0"),
			LumpName(*b"LINEDEFS"),
			LumpName(*b"SIDEDEFS"),
			LumpName(*b"VERTEXES"),
			LumpName(*b"SEGS\0\0\0\0"),
			LumpName(*b"SSECTORS"),
			LumpName(*b"NODES\0\0\0"),
			LumpName(*b"SECTORS\0"),
			LumpName(*b"REJECT\0\0"),
			LumpName(*b"BLOCKMAP"),
			LumpName(*b"MAP06\0\0\0"),
			LumpName(*b"THINGS\0\0"),
			LumpName(*b"LINEDEFS"),
			LumpName(*b"SIDEDEFS"),
			LumpName(*b"VERTEXES"),
			LumpName(*b"SEGS\0\0\0\0"),
			LumpName(*b"SSECTORS"),
			LumpName(*b"NODES\0\0\0"),
			LumpName(*b"SECTORS\0"),
			LumpName(*b"REJECT\0\0"),
			LumpName(*b"BLOCKMAP"),
			LumpName(*b"MAP07\0\0\0"),
			LumpName(*b"THINGS\0\0"),
			LumpName(*b"LINEDEFS"),
			LumpName(*b"SIDEDEFS"),
			LumpName(*b"VERTEXES"),
			LumpName(*b"SEGS\0\0\0\0"),
			LumpName(*b"SSECTORS"),
			LumpName(*b"NODES\0\0\0"),
			LumpName(*b"SECTORS\0"),
			LumpName(*b"REJECT\0\0"),
			LumpName(*b"BLOCKMAP"),
			LumpName(*b"MAP08\0\0\0"),
			LumpName(*b"THINGS\0\0"),
			LumpName(*b"LINEDEFS"),
			LumpName(*b"SIDEDEFS"),
			LumpName(*b"VERTEXES"),
			LumpName(*b"SEGS\0\0\0\0"),
			LumpName(*b"SSECTORS"),
			LumpName(*b"NODES\0\0\0"),
			LumpName(*b"SECTORS\0"),
			LumpName(*b"REJECT\0\0"),
			LumpName(*b"BLOCKMAP"),
			LumpName(*b"MAP09\0\0\0"),
			LumpName(*b"THINGS\0\0"),
			LumpName(*b"LINEDEFS"),
			LumpName(*b"SIDEDEFS"),
			LumpName(*b"VERTEXES"),
			LumpName(*b"SEGS\0\0\0\0"),
			LumpName(*b"SSECTORS"),
			LumpName(*b"NODES\0\0\0"),
			LumpName(*b"SECTORS\0"),
			LumpName(*b"REJECT\0\0"),
			LumpName(*b"BLOCKMAP"),
			LumpName(*b"MAP10\0\0\0"),
			LumpName(*b"THINGS\0\0"),
			LumpName(*b"LINEDEFS"),
			LumpName(*b"SIDEDEFS"),
			LumpName(*b"VERTEXES"),
			LumpName(*b"SEGS\0\0\0\0"),
			LumpName(*b"SSECTORS"),
			LumpName(*b"NODES\0\0\0"),
			LumpName(*b"SECTORS\0"),
			LumpName(*b"REJECT\0\0"),
			LumpName(*b"BLOCKMAP"),
			LumpName(*b"MAP11\0\0\0"),
			LumpName(*b"THINGS\0\0"),
			LumpName(*b"LINEDEFS"),
			LumpName(*b"SIDEDEFS"),
			LumpName(*b"VERTEXES"),
			LumpName(*b"SEGS\0\0\0\0"),
			LumpName(*b"SSECTORS"),
			LumpName(*b"NODES\0\0\0"),
			LumpName(*b"SECTORS\0"),
			LumpName(*b"REJECT\0\0"),
			LumpName(*b"BLOCKMAP"),
			LumpName(*b"MAP12\0\0\0"),
			LumpName(*b"THINGS\0\0"),
			LumpName(*b"LINEDEFS"),
			LumpName(*b"SIDEDEFS"),
			LumpName(*b"VERTEXES"),
			LumpName(*b"SEGS\0\0\0\0"),
			LumpName(*b"SSECTORS"),
			LumpName(*b"NODES\0\0\0"),
			LumpName(*b"SECTORS\0"),
			LumpName(*b"REJECT\0\0"),
			LumpName(*b"BLOCKMAP"),
			LumpName(*b"MAP13\0\0\0"),
			LumpName(*b"THINGS\0\0"),
			LumpName(*b"LINEDEFS"),
			LumpName(*b"SIDEDEFS"),
			LumpName(*b"VERTEXES"),
			LumpName(*b"SEGS\0\0\0\0"),
			LumpName(*b"SSECTORS"),
			LumpName(*b"NODES\0\0\0"),
			LumpName(*b"SECTORS\0"),
			LumpName(*b"REJECT\0\0"),
			LumpName(*b"BLOCKMAP"),
			LumpName(*b"MAP14\0\0\0"),
			LumpName(*b"THINGS\0\0"),
			LumpName(*b"LINEDEFS"),
			LumpName(*b"SIDEDEFS"),
			LumpName(*b"VERTEXES"),
			LumpName(*b"SEGS\0\0\0\0"),
			LumpName(*b"SSECTORS"),
			LumpName(*b"NODES\0\0\0"),
			LumpName(*b"SECTORS\0"),
			LumpName(*b"REJECT\0\0"),
			LumpName(*b"BLOCKMAP"),
			LumpName(*b"MAP15\0\0\0"),
			LumpName(*b"THINGS\0\0"),
			LumpName(*b"LINEDEFS"),
			LumpName(*b"SIDEDEFS"),
			LumpName(*b"VERTEXES"),
			LumpName(*b"SEGS\0\0\0\0"),
			LumpName(*b"SSECTORS"),
			LumpName(*b"NODES\0\0\0"),
			LumpName(*b"SECTORS\0"),
			LumpName(*b"REJECT\0\0"),
			LumpName(*b"BLOCKMAP"),
			LumpName(*b"MAP16\0\0\0"),
			LumpName(*b"THINGS\0\0"),
			LumpName(*b"LINEDEFS"),
			LumpName(*b"SIDEDEFS"),
			LumpName(*b"VERTEXES"),
			LumpName(*b"SEGS\0\0\0\0"),
			LumpName(*b"SSECTORS"),
			LumpName(*b"NODES\0\0\0"),
			LumpName(*b"SECTORS\0"),
			LumpName(*b"REJECT\0\0"),
			LumpName(*b"BLOCKMAP"),
			LumpName(*b"MAP17\0\0\0"),
			LumpName(*b"THINGS\0\0"),
			LumpName(*b"LINEDEFS"),
			LumpName(*b"SIDEDEFS"),
			LumpName(*b"VERTEXES"),
			LumpName(*b"SEGS\0\0\0\0"),
			LumpName(*b"SSECTORS"),
			LumpName(*b"NODES\0\0\0"),
			LumpName(*b"SECTORS\0"),
			LumpName(*b"REJECT\0\0"),
			LumpName(*b"BLOCKMAP"),
			LumpName(*b"MAP18\0\0\0"),
			LumpName(*b"THINGS\0\0"),
			LumpName(*b"LINEDEFS"),
			LumpName(*b"SIDEDEFS"),
			LumpName(*b"VERTEXES"),
			LumpName(*b"SEGS\0\0\0\0"),
			LumpName(*b"SSECTORS"),
			LumpName(*b"NODES\0\0\0"),
			LumpName(*b"SECTORS\0"),
			LumpName(*b"REJECT\0\0"),
			LumpName(*b"BLOCKMAP"),
			LumpName(*b"MAP19\0\0\0"),
			LumpName(*b"THINGS\0\0"),
			LumpName(*b"LINEDEFS"),
			LumpName(*b"SIDEDEFS"),
			LumpName(*b"VERTEXES"),
			LumpName(*b"SEGS\0\0\0\0"),
			LumpName(*b"SSECTORS"),
			LumpName(*b"NODES\0\0\0"),
			LumpName(*b"SECTORS\0"),
			LumpName(*b"REJECT\0\0"),
			LumpName(*b"BLOCKMAP"),
			LumpName(*b"MAP20\0\0\0"),
			LumpName(*b"THINGS\0\0"),
			LumpName(*b"LINEDEFS"),
			LumpName(*b"SIDEDEFS"),
			LumpName(*b"VERTEXES"),
			LumpName(*b"SEGS\0\0\0\0"),
			LumpName(*b"SSECTORS"),
			LumpName(*b"NODES\0\0\0"),
			LumpName(*b"SECTORS\0"),
			LumpName(*b"REJECT\0\0"),
			LumpName(*b"BLOCKMAP"),
			LumpName(*b"MAP21\0\0\0"),
			LumpName(*b"THINGS\0\0"),
			LumpName(*b"LINEDEFS"),
			LumpName(*b"SIDEDEFS"),
			LumpName(*b"VERTEXES"),
			LumpName(*b"SEGS\0\0\0\0"),
			LumpName(*b"SSECTORS"),
			LumpName(*b"NODES\0\0\0"),
			LumpName(*b"SECTORS\0"),
			LumpName(*b"REJECT\0\0"),
			LumpName(*b"BLOCKMAP"),
			LumpName(*b"MAP22\0\0\0"),
			LumpName(*b"THINGS\0\0"),
			LumpName(*b"LINEDEFS"),
			LumpName(*b"SIDEDEFS"),
			LumpName(*b"VERTEXES"),
			LumpName(*b"SEGS\0\0\0\0"),
			LumpName(*b"SSECTORS"),
			LumpName(*b"NODES\0\0\0"),
			LumpName(*b"SECTORS\0"),
			LumpName(*b"REJECT\0\0"),
			LumpName(*b"BLOCKMAP"),
			LumpName(*b"MAP23\0\0\0"),
			LumpName(*b"THINGS\0\0"),
			LumpName(*b"LINEDEFS"),
			LumpName(*b"SIDEDEFS"),
			LumpName(*b"VERTEXES"),
			LumpName(*b"SECTORS\0"),
			LumpName(*b"MAP24\0\0\0"),
			LumpName(*b"THINGS\0\0"),
			LumpName(*b"LINEDEFS"),
			LumpName(*b"SIDEDEFS"),
			LumpName(*b"VERTEXES"),
			LumpName(*b"SECTORS\0"),
		];

		assert_eq!(wad.lumps.len(), lump_names.len());
		let lumps_and_names = wad.lumps.iter().zip(lump_names);
		for lump_and_name in lumps_and_names {
			match lump_and_name {
				(ref lump, name) => {
					assert_eq!(lump.name, name);
				}
			}
		}
		Ok(())
	}

	#[test]
	fn can_write_wad() -> Result<(), Box<dyn Error>> {
		let wad = DoomWad::load_sync("tests/data/3difytest.wad")?;
		wad.write_sync("tests/data/another.wad")?;

		let wad_file = File::open("tests/data/3difytest.wad")?;
		let out_wad_file = File::open("tests/data/another.wad")?;
		wad_file.bytes().zip(out_wad_file.bytes())
			.all(|bytes| bytes.0.unwrap() == bytes.1.unwrap());
		std::fs::remove_file("tests/data/another.wad")?;
		Ok(())
	}
}
